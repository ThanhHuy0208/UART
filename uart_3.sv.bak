// Baud Rate Generator for 115200 baud with 16x oversampling (12 MHz clock)
module baud_gen_115200 (
    input  wire clk,       // 12 MHz system clock
    input  wire rst,       // synchronous reset (active high)
    output reg  s_tick     // 16x baud tick (1.8432 MHz when 115200 baud)
);
    reg [9:0] acc; // accumulator

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            acc    <= 0;
            s_tick <= 0;
        end else begin
            // Add fractional value (96) each clock
            {s_tick, acc} <= acc + 10'd96;
            if (acc + 10'd96 >= 10'd625) begin
                // When sum â‰¥ 625, output a tick and subtract 625
                s_tick <= 1;
                acc    <= acc + 10'd96 - 10'd625;
            end else begin
                s_tick <= 0;
            end
        end
    end
endmodule

/////////////////////////////////////////////////////////////////////////////////////////////

// UART Receiver (8 data bits, no parity, 1 stop bit) with 16x sampling
module uart_rx #(
    parameter DBIT = 8,           // # of data bits
    parameter SB_TICK = 16        // # of 16x ticks for stop bit (16 = 1 stop bit)
)(
    input  wire       clk,        // system clock (12 MHz)
    input  wire       rst,        // synchronous reset
    input  wire       rx,         // serial input (from PC)
    input  wire       s_tick,     // baud-rate 16x tick
    output reg [7:0]  dout,       // received byte
    output reg        rx_done_tick// high for 1 clk when byte is received
);
    // State encoding
    localparam [1:0]
        IDLE  = 2'b00,
        START = 2'b01,
        DATA  = 2'b10,
        STOP  = 2'b11;
    reg [1:0] state;
    reg [3:0] s_cnt;       // oversample tick counter (needs at least 4 bits to count up to 16)
    reg [2:0] bit_index;   // data bit index 0..7
    reg rx_sync0, rx_sync1; 

    // Double-register the RX input to synchronize
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            rx_sync0 <= 1'b1;
            rx_sync1 <= 1'b1;
        end else begin
            rx_sync0 <= rx;
            rx_sync1 <= rx_sync0;
        end
    end

    // UART receive FSM
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state        <= IDLE;
            s_cnt        <= 0;
            bit_index    <= 0;
            dout         <= 8'b0;
            rx_done_tick <= 1'b0;
        end else begin
            rx_done_tick <= 1'b0; // default: no done tick
            case (state)
                IDLE: begin
                    // Wait for start bit (falling edge)
                    if (rx_sync1 == 1'b1 && rx_sync0 == 1'b0) begin
                        state     <= START;
                        s_cnt     <= 0;
                    end
                end

                START: begin
                    // Count 8 ticks to middle of start bit
                    if (s_tick) begin
                        s_cnt <= s_cnt + 1;
                        if (s_cnt == 4'd7) begin
                            // Mid-start reached; move to DATA
                            state     <= DATA;
                            s_cnt     <= 0;
                            bit_index <= 0;
                        end
                    end
                end

                DATA: begin
                    // Sample 8 data bits, one every 16 ticks
                    if (s_tick) begin
                        s_cnt <= s_cnt + 1;
                        if (s_cnt == 4'd15) begin
                            // Every 16 ticks: latch data bit
                            dout[bit_index] <= rx_sync0;
                            s_cnt <= 0;
                            if (bit_index == DBIT-1) begin
                                state <= STOP;
                            end else begin
                                bit_index <= bit_index + 1;
                            end
                        end
                    end
                end

                STOP: begin
                    // Wait full stop bit (16 ticks)
                    if (s_tick) begin
                        s_cnt <= s_cnt + 1;
                        if (s_cnt == (SB_TICK-1)) begin
                            // Stop bit done: output byte
                            state        <= IDLE;
                            rx_done_tick <= 1'b1;
                        end
                    end
                end

            endcase
        end
    end
endmodule

/////////////////////////////////////////////////////////////////////

// Top-level: instantiates Baud Generator and UART_RX, drives 8 LEDs
module uart_3(
    input  wire       clk,      // 12 MHz clock
    input  wire       rst,      // reset
    input  wire       uart_rx,  // serial input
    output reg [7:0]  led       // LEDs showing received byte
);
    wire s_tick;
    wire [7:0] data_byte;
    wire rx_done;

    // Generate 16x baud tick
    baud_gen_115200 baud_gen_inst (
        .clk(clk), .rst(rst), .s_tick(s_tick)
    );

    // UART receiver
    uart_rx uart_rx_inst (
        .clk(clk), .rst(rst), .rx(uart_rx),
        .s_tick(s_tick),
        .dout(data_byte),
        .rx_done_tick(rx_done)
    );

    // Latch received byte to LEDs when a new byte arrives
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            led <= 8'b0;
        end else if (rx_done) begin
            led <= data_byte;
        end
    end
endmodule
